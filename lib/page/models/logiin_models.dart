class Autogenerated {
  String? client;
  String? collectionName;
  String? dateExported;
  String? version;
  List<Null>? folders;
  List<Requests>? requests;

  Autogenerated(
      {this.client,
      this.collectionName,
      this.dateExported,
      this.version,
      this.folders,
      this.requests});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    client = json['client'];
    collectionName = json['collectionName'];
    dateExported = json['dateExported'];
    version = json['version'];
    if (json['folders'] != null) {
      folders = <Null>[];
      json['folders'].forEach((v) {});
    }
    if (json['requests'] != null) {
      requests = <Requests>[];
      json['requests'].forEach((v) {
        requests!.add(new Requests.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['client'] = this.client;
    data['collectionName'] = this.collectionName;
    data['dateExported'] = this.dateExported;
    data['version'] = this.version;
    if (this.folders != null) {}
    if (this.requests != null) {
      data['requests'] = this.requests!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Requests {
  String? containerId;
  int? sortNum;
  List<Headers>? headers;
  String? colId;
  String? name;
  String? url;
  String? method;
  String? modified;
  String? created;
  String? sId;
  List<Params>? params;
  Body? body;
  List<Null>? tests;

  Requests(
      {this.containerId,
      this.sortNum,
      this.headers,
      this.colId,
      this.name,
      this.url,
      this.method,
      this.modified,
      this.created,
      this.sId,
      this.params,
      this.body,
      this.tests});

  Requests.fromJson(Map<String, dynamic> json) {
    containerId = json['containerId'];
    sortNum = json['sortNum'];
    if (json['headers'] != null) {
      headers = <Headers>[];
      json['headers'].forEach((v) {
        headers!.add(new Headers.fromJson(v));
      });
    }
    colId = json['colId'];
    name = json['name'];
    url = json['url'];
    method = json['method'];
    modified = json['modified'];
    created = json['created'];
    sId = json['_id'];
    if (json['params'] != null) {
      params = <Params>[];
      json['params'].forEach((v) {
        params!.add(new Params.fromJson(v));
      });
    }
    body = json['body'] != null ? new Body.fromJson(json['body']) : null;
    if (json['tests'] != null) {
      tests = <Null>[];
      json['tests'].forEach((v) {});
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['containerId'] = this.containerId;
    data['sortNum'] = this.sortNum;
    if (this.headers != null) {
      data['headers'] = this.headers!.map((v) => v.toJson()).toList();
    }
    data['colId'] = this.colId;
    data['name'] = this.name;
    data['url'] = this.url;
    data['method'] = this.method;
    data['modified'] = this.modified;
    data['created'] = this.created;
    data['_id'] = this.sId;
    if (this.params != null) {
      data['params'] = this.params!.map((v) => v.toJson()).toList();
    }
    if (this.body != null) {
      data['body'] = this.body!.toJson();
    }
    if (this.tests != null) {}
    return data;
  }
}

class Headers {
  String? name;
  String? value;

  Headers({this.name, this.value});

  Headers.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    value = json['value'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['name'] = this.name;
    data['value'] = this.value;
    return data;
  }
}

class Params {
  String? name;
  String? value;
  bool? isPath;

  Params({this.name, this.value, this.isPath});

  Params.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    value = json['value'];
    isPath = json['isPath'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['name'] = this.name;
    data['value'] = this.value;
    data['isPath'] = this.isPath;
    return data;
  }
}

class Body {
  String? type;
  String? raw;
  List<Null>? form;

  Body({this.type, this.raw, this.form});

  Body.fromJson(Map<String, dynamic> json) {
    type = json['type'];
    raw = json['raw'];
    if (json['form'] != null) {
      form = <Null>[];
      json['form'].forEach((v) {});
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['type'] = this.type;
    data['raw'] = this.raw;
    if (this.form != null) {}
    return data;
  }
}
